import { useContext, useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { AppContext } from '../context';
import BigNumber from 'bignumber.js';
import { chain, useAccount, useConnect, useDisconnect } from 'wagmi';
import { MetaMaskConnector } from 'wagmi/connectors/metaMask';
import { providers } from 'ethers';

const connector = new MetaMaskConnector({
  chains: [chain.polygon],
});

const Home: NextPage = () => {
  const { bundlr, balance, init, refreshBalance } = useContext(AppContext);
  const { connect } = useConnect({ connector });
  const { disconnect } = useDisconnect();
  const { address, isConnected } = useAccount();
  const [file, setFile] = useState<Buffer>();
  const [amount, setAmount] = useState<string>();
  const [items, setItems] = useState<string[]>([]);

  const getProvider = async () => {
    const network = {
      chainId: 137,
      chainName: 'Polygon Mainnet',
      rpcUrls: ['https://polygon-rpc.com'],
    };
    if (!window?.ethereum?.isMetaMask) return;
    await window.ethereum.enable();
    const provider = new providers.Web3Provider(window.ethereum);
    await provider._ready();
    const chainId = `0x${network.chainId.toString(16)}`;
    try {
      // additional logic for requesting a chain switch and conditional chain add.
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId }],
      });
    } catch (e: any) {
      if (e.code === 4902) {
        await window.ethereum.request({
          method: 'wallet_addEthereumChain',
          params: [
            {
              chainId,
              rpcUrls: network.rpcUrls,
              chainName: network.chainName,
            },
          ],
        });
      }
    }
    return provider;
  };

  const connectWallet = async () => {
    connect();
    const provider = await getProvider();
    await init(provider);
    await refreshBalance();
  };

  function handleOnFileChange(e: any) {
    const file = e.target.files[0];
    if (file) {
      let reader = new FileReader();
      reader.onload = function () {
        if (reader.result) {
          setFile(Buffer.from(reader.result as any));
        }
      };
      reader.readAsArrayBuffer(file);
    }
  }

  async function handleUploadFile() {
    try {
      let tx = await bundlr?.instance?.uploader.upload(file, [{ name: 'Content-Type', value: 'image/png' }]);
      console.log('tx: ', tx);
      setItems((pv) => [tx.data.id, ...pv]);
    } catch (error) {
      alert((error as Error).message);
    }
  }

  async function handleFundWallet() {
    try {
      if (!amount) return;
      const amountParsed = parseInput(amount);
      let response = await bundlr?.instance?.fund(amountParsed);
      console.log('Wallet funded: ', response);
      await refreshBalance();
    } catch (error) {
      alert((error as Error).message);
    }
  }

  function parseInput(input: any) {
    const conv = new BigNumber(input).multipliedBy(bundlr?.instance?.currencyConfig.base[1]);
    if (conv.isLessThan(1)) {
      console.log('error: value too small');
      return;
    } else {
      return conv;
    }
  }

  return (
    <div className="relative px-8">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <button
        type="submit"
        className="absolute top-10 right-10 inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
        onClick={!isConnected ? () => connectWallet() : () => disconnect()}
      >
        {!isConnected ? 'Connect Wallet' : 'Disconnect'}
      </button>

      <main className="min-h-screen flex flex-1 flex-col justify-center items-center py-8">
        <p className="text-center leading-normal text-2xl my-16">
          Address{' '}
          <code className="code">
            {address?.slice(0, 6)}...{address?.slice(-4)}
          </code>
          . Balance <code className="code">{balance}</code>
        </p>

        <div className="flex gap-3 mb-4">
          <input
            type="text"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-black"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
          />
          <button
            type="submit"
            className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            onClick={() => handleFundWallet()}
          >
            Fund Wallet
          </button>
        </div>

        <div className="flex gap-3 mt-2">
          <input type="file" className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-black" onChange={handleOnFileChange} />
          <button
            type="submit"
            className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            onClick={() => handleUploadFile()}
          >
            Upload FIle
          </button>
        </div>

        <div className="flex items-center justify-center flex-wrap max-w-[800px]">
          {items.map((item) => (
            <a key={item} href={`http://arweave.net/${item}`} className="card" target="_blank" rel="noopener noreferrer">
              <p>{item}</p>
            </a>
          ))}
        </div>
      </main>
    </div>
  );
};

export default Home;
